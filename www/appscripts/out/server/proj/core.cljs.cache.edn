;; Analyzed by ClojureScript 0.0-3196
{:use-macros nil, :excludes #{}, :name proj.core, :imports nil, :requires {clojure.browser.repl clojure.browser.repl, repl clojure.browser.repl}, :uses nil, :defs {combinational-parameters {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(scoreEvents args)], :arglists [[scoreEvents & args]], :arglists-meta (nil)}, :arglists (quote ([scoreEvents & args])), :export true, :end-column 40, :end-line 273, :column 16, :line 273, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/combinational-parameters, :variadic true, :file "src/server/proj/core.cljs", :end-column 40, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(scoreEvents args)], :arglists [[scoreEvents & args]], :arglists-meta (nil)}, :method-params [(scoreEvents args)], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists [[scoreEvents & args]], :test true}, create-retro {:protocol-inline nil, :meta {:arglists (quote ([g1])), :export true, :end-column 28, :end-line 412, :column 16, :line 412, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/create-retro, :variadic false, :file "src/server/proj/core.cljs", :end-column 28, :method-params ([g1]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g1])), :test true}, identify-id {:protocol-inline nil, :meta {:arglists (quote ([g1 g2])), :export true, :end-column 27, :end-line 404, :column 16, :line 404, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/identify-id, :variadic false, :file "src/server/proj/core.cljs", :end-column 27, :method-params ([g1 g2]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g1 g2])), :test true}, lazyevl {:protocol-inline nil, :meta {:arglists (quote ([vect ctr ret])), :export true, :end-column 23, :end-line 226, :column 16, :line 226, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/lazyevl, :variadic false, :file "src/server/proj/core.cljs", :end-column 23, :method-params ([vect ctr ret]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vect ctr ret])), :test true}, assoc-ud {:protocol-inline nil, :meta {:arglists (quote ([vect ind new-val ctr ret])), :export true, :end-column 24, :end-line 215, :column 16, :line 215, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/assoc-ud, :variadic false, :file "src/server/proj/core.cljs", :end-column 24, :method-params ([vect ind new-val ctr ret]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 5, :fn-var true, :arglists (quote ([vect ind new-val ctr ret])), :test true}, well-formedness {:protocol-inline nil, :meta {:arglists (quote ([gesture])), :export true, :end-column 31, :end-line 197, :column 16, :line 197, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/well-formedness, :variadic false, :file "src/server/proj/core.cljs", :end-column 31, :method-params ([gesture]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([gesture])), :test true}, apply-id {:protocol-inline nil, :meta {:arglists (quote ([g1])), :export true, :end-column 24, :end-line 455, :column 16, :line 455, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/apply-id, :variadic false, :file "src/server/proj/core.cljs", :end-column 24, :method-params ([g1]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 455, :end-line 455, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g1])), :test true}, start_t {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 23, :end-line 30, :column 16, :line 30, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/start_t, :variadic false, :file "src/server/proj/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, identify-retro {:protocol-inline nil, :meta {:arglists (quote ([g1 g2])), :export true, :end-column 30, :end-line 444, :column 16, :line 444, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/identify-retro, :variadic false, :file "src/server/proj/core.cljs", :end-column 30, :method-params ([g1 g2]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g1 g2])), :test true}, rule_inverse {:protocol-inline nil, :meta {:arglists (quote ([most_recent_gesture tso])), :export true, :end-column 28, :end-line 125, :column 16, :line 125, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/rule_inverse, :variadic false, :file "src/server/proj/core.cljs", :end-column 28, :method-params ([most_recent_gesture tso]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([most_recent_gesture tso])), :test true}, self-watching-stub {:protocol-inline nil, :meta {:arglists (quote ([scoreEvents])), :export true, :end-column 35, :end-line 631, :column 17, :line 631, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/self-watching-stub, :variadic false, :file "src/server/proj/core.cljs", :end-column 35, :method-params ([scoreEvents]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 631, :end-line 631, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scoreEvents])), :test true}, apply-retro {:protocol-inline nil, :meta {:arglists (quote ([g1])), :export true, :end-column 27, :end-line 459, :column 16, :line 459, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/apply-retro, :variadic false, :file "src/server/proj/core.cljs", :end-column 27, :method-params ([g1]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g1])), :test true}, sqrt {:meta {:end-column 10, :end-line 74, :column 6, :line 74, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :file "src/server/proj/core.cljs", :line 74, :column 1, :end-line 74, :end-column 10, :test true, :name proj.core/sqrt}, end_t {:protocol-inline nil, :meta {:arglists (quote ([st])), :export true, :end-column 21, :end-line 36, :column 16, :line 36, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/end_t, :variadic false, :file "src/server/proj/core.cljs", :end-column 21, :method-params ([st]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([st])), :test true}, abso {:meta {:end-column 10, :end-line 76, :column 6, :line 76, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :file "src/server/proj/core.cljs", :line 76, :column 1, :end-line 76, :end-column 10, :test true, :name proj.core/abso}, analogy-making {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 4, :method-params [(scoreEvents op op-identify-fn op-apply-fn answer)], :arglists [[scoreEvents op op-identify-fn op-apply-fn & answer]], :arglists-meta (nil)}, :arglists (quote ([scoreEvents op op-identify-fn op-apply-fn & answer])), :export true, :end-column 30, :end-line 501, :column 16, :line 501, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/analogy-making, :variadic true, :file "src/server/proj/core.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(scoreEvents op op-identify-fn op-apply-fn answer)], :arglists [[scoreEvents op op-identify-fn op-apply-fn & answer]], :arglists-meta (nil)}, :method-params [(scoreEvents op op-identify-fn op-apply-fn answer)], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 4, :fn-var true, :arglists [[scoreEvents op op-identify-fn op-apply-fn & answer]], :test true}, self-watching {:protocol-inline nil, :meta {:arglists (quote ([scoreEvents op op-identify-fn op-apply-fn it answer])), :export true, :end-column 29, :end-line 593, :column 16, :line 593, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/self-watching, :variadic false, :file "src/server/proj/core.cljs", :end-column 29, :method-params ([scoreEvents op op-identify-fn op-apply-fn it answer]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 593, :end-line 593, :max-fixed-arity 6, :fn-var true, :arglists (quote ([scoreEvents op op-identify-fn op-apply-fn it answer])), :test true}, start {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 21, :end-line 12, :column 16, :line 12, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/start, :variadic false, :file "src/server/proj/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, aesthetic-rule-retro {:protocol-inline nil, :meta {:arglists (quote ([oGest newGest])), :export true, :end-column 36, :end-line 238, :column 16, :line 238, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/aesthetic-rule-retro, :variadic false, :file "src/server/proj/core.cljs", :end-column 36, :method-params ([oGest newGest]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([oGest newGest])), :test true}, simple-repeat {:protocol-inline nil, :meta {:arglists (quote ([most_recent_gesture tso])), :export true, :end-column 29, :end-line 80, :column 16, :line 80, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/simple-repeat, :variadic false, :file "src/server/proj/core.cljs", :end-column 29, :method-params ([most_recent_gesture tso]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([most_recent_gesture tso])), :test true}, rule_harmonize {:protocol-inline nil, :meta {:arglists (quote ([most_recent_gesture tso])), :export true, :end-column 30, :end-line 154, :column 16, :line 154, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/rule_harmonize, :variadic false, :file "src/server/proj/core.cljs", :end-column 30, :method-params ([most_recent_gesture tso]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([most_recent_gesture tso])), :test true}, apply-std {:protocol-inline nil, :meta {:arglists (quote ([g1])), :export true, :end-column 25, :end-line 464, :column 16, :line 464, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/apply-std, :variadic false, :file "src/server/proj/core.cljs", :end-column 25, :method-params ([g1]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 464, :end-line 464, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g1])), :test true}, end_y {:protocol-inline nil, :meta {:arglists (quote ([st])), :export true, :end-column 21, :end-line 45, :column 16, :line 45, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/end_y, :variadic false, :file "src/server/proj/core.cljs", :end-column 21, :method-params ([st]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([st])), :test true}, analogy-stub {:protocol-inline nil, :meta {:arglists (quote ([scoreEvents])), :export true, :end-column 28, :end-line 574, :column 16, :line 574, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/analogy-stub, :variadic false, :file "src/server/proj/core.cljs", :end-column 28, :method-params ([scoreEvents]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scoreEvents])), :test true}, start_y {:protocol-inline nil, :meta {:arglists (quote ([])), :export true, :end-column 23, :end-line 50, :column 16, :line 50, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/start_y, :variadic false, :file "src/server/proj/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, create-id {:protocol-inline nil, :meta {:arglists (quote ([g1])), :export true, :end-column 25, :end-line 427, :column 16, :line 427, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/create-id, :variadic false, :file "src/server/proj/core.cljs", :end-column 25, :method-params ([g1]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 427, :end-line 427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g1])), :test true}, k_max_d {:meta {:export true, :end-column 22, :end-line 21, :column 15, :line 21, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :file "src/server/proj/core.cljs", :line 21, :column 1, :end-line 21, :end-column 22, :export true, :test true, :name proj.core/k_max_d}, knobbification {:protocol-inline nil, :meta {:arglists (quote ([scoreEvents])), :export true, :end-column 30, :end-line 353, :column 16, :line 353, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/knobbification, :variadic false, :file "src/server/proj/core.cljs", :end-column 30, :method-params ([scoreEvents]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scoreEvents])), :test true}, knobbification-step {:protocol-inline nil, :meta {:arglists (quote ([hi low step])), :export true, :end-column 35, :end-line 348, :column 16, :line 348, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/knobbification-step, :variadic false, :file "src/server/proj/core.cljs", :end-column 35, :method-params ([hi low step]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 3, :fn-var true, :arglists (quote ([hi low step])), :test true}, combinational-transformation {:protocol-inline nil, :meta {:arglists (quote ([scoreEvents])), :export true, :end-column 44, :end-line 383, :column 16, :line 383, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/combinational-transformation, :variadic false, :file "src/server/proj/core.cljs", :end-column 44, :method-params ([scoreEvents]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([scoreEvents])), :test true}, tranpose {:protocol-inline nil, :meta {:arglists (quote ([most_recent_gesture tso])), :export true, :end-column 24, :end-line 98, :column 16, :line 98, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/tranpose, :variadic false, :file "src/server/proj/core.cljs", :end-column 24, :method-params ([most_recent_gesture tso]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([most_recent_gesture tso])), :test true}, retrieve-fn {:protocol-inline nil, :meta {:arglists (quote ([op1 op2])), :export true, :end-column 27, :end-line 485, :column 16, :line 485, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/retrieve-fn, :variadic false, :file "src/server/proj/core.cljs", :end-column 27, :method-params ([op1 op2]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 2, :fn-var true, :arglists (quote ([op1 op2])), :test true}, square {:protocol-inline nil, :meta {:arglists (quote ([x])), :export true, :end-column 22, :end-line 187, :column 16, :line 187, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/square, :variadic false, :file "src/server/proj/core.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, k_min_d {:meta {:export true, :end-column 22, :end-line 25, :column 15, :line 25, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :file "src/server/proj/core.cljs", :line 25, :column 1, :end-line 25, :end-column 22, :export true, :test true, :name proj.core/k_min_d}, d {:protocol-inline nil, :meta {:arglists (quote ([tso])), :export true, :end-column 17, :end-line 57, :column 16, :line 57, :file "/home/prashanth/Desktop/node-cljs/proj/src/server/proj/core.cljs"}, :name proj.core/d, :variadic false, :file "src/server/proj/core.cljs", :end-column 17, :method-params ([tso]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tso])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else], :seen #{:else}}, :doc nil}